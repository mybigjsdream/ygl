{"version":3,"sources":["meteor://ðŸ’»app/packages/jparker_crypto-sha1/packages/jparker_crypto-sha1.js"],"names":[],"mappingsfile":"/packages/jparker_crypto-sha1.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/jparker:crypto-sha1/lib/sha1.js                                                         //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n/*                                                                                                  // 1\nCryptoJS v3.1.2                                                                                     // 2\ncode.google.com/p/crypto-js                                                                         // 3\n(c) 2009-2013 by Jeff Mott. All rights reserved.                                                    // 4\ncode.google.com/p/crypto-js/wiki/License                                                            // 5\n*/                                                                                                  // 6\n(function () {                                                                                      // 7\n    // Shortcuts                                                                                    // 8\n    var C = CryptoJS;                                                                               // 9\n    var C_lib = C.lib;                                                                              // 10\n    var WordArray = C_lib.WordArray;                                                                // 11\n    var Hasher = C_lib.Hasher;                                                                      // 12\n    var C_algo = C.algo;                                                                            // 13\n                                                                                                    // 14\n    // Reusable object                                                                              // 15\n    var W = [];                                                                                     // 16\n                                                                                                    // 17\n    /**                                                                                             // 18\n     * SHA-1 hash algorithm.                                                                        // 19\n     */                                                                                             // 20\n    var SHA1 = C_algo.SHA1 = Hasher.extend({                                                        // 21\n        _doReset: function () {                                                                     // 22\n            this._hash = new WordArray.init([                                                       // 23\n                0x67452301, 0xefcdab89,                                                             // 24\n                0x98badcfe, 0x10325476,                                                             // 25\n                0xc3d2e1f0                                                                          // 26\n            ]);                                                                                     // 27\n        },                                                                                          // 28\n                                                                                                    // 29\n        _doProcessBlock: function (M, offset) {                                                     // 30\n            // Shortcut                                                                             // 31\n            var H = this._hash.words;                                                               // 32\n                                                                                                    // 33\n            // Working variables                                                                    // 34\n            var a = H[0];                                                                           // 35\n            var b = H[1];                                                                           // 36\n            var c = H[2];                                                                           // 37\n            var d = H[3];                                                                           // 38\n            var e = H[4];                                                                           // 39\n                                                                                                    // 40\n            // Computation                                                                          // 41\n            for (var i = 0; i < 80; i++) {                                                          // 42\n                if (i < 16) {                                                                       // 43\n                    W[i] = M[offset + i] | 0;                                                       // 44\n                } else {                                                                            // 45\n                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];                            // 46\n                    W[i] = (n << 1) | (n >>> 31);                                                   // 47\n                }                                                                                   // 48\n                                                                                                    // 49\n                var t = ((a << 5) | (a >>> 27)) + e + W[i];                                         // 50\n                if (i < 20) {                                                                       // 51\n                    t += ((b & c) | (~b & d)) + 0x5a827999;                                         // 52\n                } else if (i < 40) {                                                                // 53\n                    t += (b ^ c ^ d) + 0x6ed9eba1;                                                  // 54\n                } else if (i < 60) {                                                                // 55\n                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;                                // 56\n                } else /* if (i < 80) */ {                                                          // 57\n                    t += (b ^ c ^ d) - 0x359d3e2a;                                                  // 58\n                }                                                                                   // 59\n                                                                                                    // 60\n                e = d;                                                                              // 61\n                d = c;                                                                              // 62\n                c = (b << 30) | (b >>> 2);                                                          // 63\n                b = a;                                                                              // 64\n                a = t;                                                                              // 65\n            }                                                                                       // 66\n                                                                                                    // 67\n            // Intermediate hash value                                                              // 68\n            H[0] = (H[0] + a) | 0;                                                                  // 69\n            H[1] = (H[1] + b) | 0;                                                                  // 70\n            H[2] = (H[2] + c) | 0;                                                                  // 71\n            H[3] = (H[3] + d) | 0;                                                                  // 72\n            H[4] = (H[4] + e) | 0;                                                                  // 73\n        },                                                                                          // 74\n                                                                                                    // 75\n        _doFinalize: function () {                                                                  // 76\n            // Shortcuts                                                                            // 77\n            var data = this._data;                                                                  // 78\n            var dataWords = data.words;                                                             // 79\n                                                                                                    // 80\n            var nBitsTotal = this._nDataBytes * 8;                                                  // 81\n            var nBitsLeft = data.sigBytes * 8;                                                      // 82\n                                                                                                    // 83\n            // Add padding                                                                          // 84\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                            // 85\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000); // 86\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                           // 87\n            data.sigBytes = dataWords.length * 4;                                                   // 88\n                                                                                                    // 89\n            // Hash final blocks                                                                    // 90\n            this._process();                                                                        // 91\n                                                                                                    // 92\n            // Return final computed hash                                                           // 93\n            return this._hash;                                                                      // 94\n        },                                                                                          // 95\n                                                                                                    // 96\n        clone: function () {                                                                        // 97\n            var clone = Hasher.clone.call(this);                                                    // 98\n            clone._hash = this._hash.clone();                                                       // 99\n                                                                                                    // 100\n            return clone;                                                                           // 101\n        }                                                                                           // 102\n    });                                                                                             // 103\n                                                                                                    // 104\n    /**                                                                                             // 105\n     * Shortcut function to the hasher's object interface.                                          // 106\n     *                                                                                              // 107\n     * @param {WordArray|string} message The message to hash.                                       // 108\n     *                                                                                              // 109\n     * @return {WordArray} The hash.                                                                // 110\n     *                                                                                              // 111\n     * @static                                                                                      // 112\n     *                                                                                              // 113\n     * @example                                                                                     // 114\n     *                                                                                              // 115\n     *     var hash = CryptoJS.SHA1('message');                                                     // 116\n     *     var hash = CryptoJS.SHA1(wordArray);                                                     // 117\n     */                                                                                             // 118\n    C.SHA1 = Hasher._createHelper(SHA1);                                                            // 119\n                                                                                                    // 120\n    /**                                                                                             // 121\n     * Shortcut function to the HMAC's object interface.                                            // 122\n     *                                                                                              // 123\n     * @param {WordArray|string} message The message to hash.                                       // 124\n     * @param {WordArray|string} key The secret key.                                                // 125\n     *                                                                                              // 126\n     * @return {WordArray} The HMAC.                                                                // 127\n     *                                                                                              // 128\n     * @static                                                                                      // 129\n     *                                                                                              // 130\n     * @example                                                                                     // 131\n     *                                                                                              // 132\n     *     var hmac = CryptoJS.HmacSHA1(message, key);                                              // 133\n     */                                                                                             // 134\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);                                                    // 135\n}());                                                                                               // 136\n                                                                                                    // 137\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}